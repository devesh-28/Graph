//As in bfs we use queue in DFS we use the principal of recursion 
//where we visit one vertex mark it as true then search for its adjacent till the ver tex has no adjacent then the control is returned to the caller
public static void dfs(ArrayList<ArrayList<Integer>>adj,int v)
    {
        boolean visited[]=new boolean[v];
        for(int i=0;i<v;i++)
        {
            visited[i]=false;
        }
        for(int i=0;i<v;i++)
        {
            if(visited[i]==false)
            {
                dfsmain(adj,i,visited);
            }
        }
    }
    public static void dfsmain(ArrayList<ArrayList<Integer>>adj,int s,boolean visited[])
    {
        visited[s]=true;
        System.out.println(s);
        //to find the adjacent of vertex
        for(int v:adj.get(s))
        {
            if(visited[v]==false)
            {
               //recursion
                dfsmain(adj,v,visited);
            }
        }

    }
